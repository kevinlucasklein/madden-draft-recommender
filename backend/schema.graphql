# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Archetype {
  id: Int!
  label: String!
  name: String!
}

input CreateArchetypeInput {
  label: String!
}

input CreateDraftPickInput {
  draftedPosition: String!
  pickNumber: Int!
  playerId: Int!
  roundNumber: Int!
  sessionId: Int!
}

input CreateDraftRecommendationInput {
  pickNumber: Int!
  playerId: Int!
  reason: String!
  recommendationScore: Float!
  roundNumber: Int!
  sessionId: Int!
}

input CreateDraftSessionInput {
  draftPosition: Int!
  rosterNeeds: String!
  status: String! = "ACTIVE"
}

input CreatePlayerAbilityInput {
  abilityLabel: String!
  abilityOrder: Int!
  playerId: Int!
  ratingId: Int
}

input CreatePlayerAnalysisInput {
  ageAdjustedScore: Float
  bestPositionScore: Float
  normalizedScore: Float
  originalPositionScore: Float
  playerId: Int!
  playerType: String
  positionChangeRecommended: Boolean
  projectedPick: Int
  rank: Int
  ratingId: Int
  suggestedPosition: String
}

input CreatePlayerInput {
  age: Int!
  archetypeId: Int
  college: String!
  firstName: String!
  handedness: String!
  height: String!
  jerseyNumber: Int!
  lastName: String!
  positionId: Int
  teamId: Int
  weight: Int!
  yearsPro: Int!
}

input CreatePlayerRatingInput {
  archetypeId: Int
  iterationLabel: String!
  overallRating: Float!
  playerId: Int!
  positionId: Int
  teamId: Int
}

input CreatePlayerStatsInput {
  acceleration: Float
  agility: Float
  awareness: Float
  bcvision: Float
  blockShedding: Float
  breakSack: Float
  breakTackle: Float
  carrying: Float
  catchInTraffic: Float
  catching: Float
  changeOfDirection: Float
  deepRouteRunning: Float
  finesseMoves: Float
  hitPower: Float
  impactBlocking: Float
  injury: Float
  jukeMove: Float
  jumping: Float
  kickAccuracy: Float
  kickPower: Float
  kickReturn: Float
  leadBlock: Float
  manCoverage: Float
  mediumRouteRunning: Float
  passBlock: Float
  passBlockFinesse: Float
  passBlockPower: Float
  playAction: Float
  playRecognition: Float
  playerId: Int!
  powerMoves: Float
  press: Float
  pursuit: Float
  ratingId: Int
  release: Float
  runBlock: Float
  runBlockFinesse: Float
  runBlockPower: Float
  runningStyle: String
  shortRouteRunning: Float
  spectacularCatch: Float
  speed: Float
  spinMove: Float
  stamina: Float
  stiffArm: Float
  strength: Float
  tackle: Float
  throwAccuracyDeep: Float
  throwAccuracyMid: Float
  throwAccuracyShort: Float
  throwOnTheRun: Float
  throwPower: Float
  throwUnderPressure: Float
  toughness: Float
  trucking: Float
  zoneCoverage: Float
}

input CreatePositionInput {
  code: String!
  name: String!
  type: String!
}

input CreateRosterRequirementInput {
  isRequired: Boolean!
  maximumPlayers: Int!
  minimumPlayers: Int!
  position: String!
  positionGroup: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type DraftData {
  overall_pick: Int!
  player: Player!
  player_id: Int!
  round: Int!
  round_pick: Int!
}

type DraftPick {
  draftedPosition: String!
  id: Int!
  pickNumber: Int!
  pickedAt: DateTimeISO!
  player: Player!
  roundNumber: Int!
  session: DraftSession!
}

type DraftRecommendation {
  id: Int!
  pickNumber: Int!
  player: Player!
  reason: String!
  recommendationScore: Float!
  roundNumber: Int!
  session: DraftSession!
}

type DraftSession {
  createdAt: DateTimeISO!
  draftPosition: Int!
  id: Int!
  picks: [DraftPick!]
  recommendations: [DraftRecommendation!]
  rosterNeeds: String!
  status: String!
}

input GenerateRecommendationsInput {
  limit: Int
  pickNumber: Int!
  roundNumber: Int!
  sessionId: Int!
}

type Mutation {
  createArchetype(input: CreateArchetypeInput!): Archetype!
  createDraftPick(input: CreateDraftPickInput!): DraftPick!
  createDraftRecommendation(input: CreateDraftRecommendationInput!): DraftRecommendation!
  createDraftSession(input: CreateDraftSessionInput!): DraftSession!
  createPlayer(input: CreatePlayerInput!): Player!
  createPlayerAbility(input: CreatePlayerAbilityInput!): PlayerAbility!
  createPlayerAnalysis(input: CreatePlayerAnalysisInput!): PlayerAnalysis!
  createPlayerRating(input: CreatePlayerRatingInput!): PlayerRating!
  createPlayerStats(input: CreatePlayerStatsInput!): PlayerStats!
  createPosition(input: CreatePositionInput!): Position!
  createRosterRequirement(input: CreateRosterRequirementInput!): RosterRequirement!
  deleteArchetype(id: Int!): Boolean!
  deleteDraftPick(id: Int!): Boolean!
  deleteDraftRecommendation(id: Int!): Boolean!
  deleteDraftSession(id: Int!): Boolean!
  deletePlayer(id: Int!): Boolean!
  deletePlayerAbility(id: Int!): Boolean!
  deletePlayerAnalysis(id: Int!): Boolean!
  deletePlayerRating(id: Int!): Boolean!
  deletePlayerStats(id: Int!): Boolean!
  deletePosition(id: Int!): Boolean!
  deleteRosterRequirement(id: Int!): Boolean!
  generateRecommendations(input: GenerateRecommendationsInput!): [DraftRecommendation!]!
  reorderPlayerAbilities(abilityIds: [Int!]!, playerId: Int!): [PlayerAbility!]!
  updateArchetype(id: Int!, input: UpdateArchetypeInput!): Archetype!
  updateDraftPick(id: Int!, input: UpdateDraftPickInput!): DraftPick!
  updateDraftRecommendation(id: Int!, input: UpdateDraftRecommendationInput!): DraftRecommendation!
  updateDraftSession(id: Int!, input: UpdateDraftSessionInput!): DraftSession!
  updatePlayer(id: Int!, input: UpdatePlayerInput!): Player!
  updatePlayerAbility(id: Int!, input: UpdatePlayerAbilityInput!): PlayerAbility!
  updatePlayerAnalysis(id: Int!, input: UpdatePlayerAnalysisInput!): PlayerAnalysis!
  updatePlayerAnalysisRanks: Boolean!
  updatePlayerRating(id: Int!, input: UpdatePlayerRatingInput!): PlayerRating!
  updatePlayerStats(id: Int!, input: UpdatePlayerStatsInput!): PlayerStats!
  updatePosition(id: Int!, input: UpdatePositionInput!): Position!
  updateRosterRequirement(id: Int!, input: UpdateRosterRequirementInput!): RosterRequirement!
}

type Player {
  abilities: [PlayerAbility!]
  age: Int
  analysis: PlayerAnalysis!
  archetype: Archetype
  college: String
  draftData: DraftData
  firstName: String
  handedness: String
  height: String
  id: Int!
  jerseyNumber: Int
  lastName: String
  position: Position
  ratings: [PlayerRating!]
  stats: [PlayerStats!]
  team: Team
  weight: Int
  yearsPro: Int
}

type PlayerAbility {
  abilityLabel: String!
  abilityOrder: Int!
  description: String!
  id: Int!
  name: String!
  player: Player!
  rating: PlayerRating
}

type PlayerAnalysis {
  ageAdjustedScore: Float
  bestPositionScore: Float
  id: Int!
  normalizedScore: Float
  originalPositionScore: Float
  player: Player!
  playerType: String
  positionChangeRecommended: Boolean
  projectedPick: Int
  rank: Int
  rating: PlayerRating
  suggestedPosition: String
}

type PlayerRating {
  archetype: Archetype
  id: Int!
  iterationLabel: String!
  overall: Float!
  overallRating: Float!
  player: Player!
  position: Position
  team: Team
}

type PlayerStats {
  acceleration: Float
  agility: Float
  awareness: Float
  bcvision: Float
  blockShedding: Float
  breakSack: Float
  breakTackle: Float
  carrying: Float
  catchInTraffic: Float
  catching: Float
  changeOfDirection: Float
  deepRouteRunning: Float
  finesseMoves: Float
  hitPower: Float
  id: Int!
  impactBlocking: Float
  injury: Float
  jukeMove: Float
  jumping: Float
  kickAccuracy: Float
  kickPower: Float
  kickReturn: Float
  leadBlock: Float
  manCoverage: Float
  mediumRouteRunning: Float
  passBlock: Float
  passBlockFinesse: Float
  passBlockPower: Float
  playAction: Float
  playRecognition: Float
  player: Player!
  powerMoves: Float
  press: Float
  pursuit: Float
  rating: PlayerRating
  release: Float
  runBlock: Float
  runBlockFinesse: Float
  runBlockPower: Float
  runningStyle: String
  shortRouteRunning: Float
  spectacularCatch: Float
  speed: Float
  spinMove: Float
  stamina: Float
  stiffArm: Float
  strength: Float
  tackle: Float
  throwAccuracyDeep: Float
  throwAccuracyMid: Float
  throwAccuracyShort: Float
  throwOnTheRun: Float
  throwPower: Float
  throwUnderPressure: Float
  toughness: Float
  trucking: Float
  zoneCoverage: Float
}

type Position {
  code: String!
  id: Int!
  name: String!
  type: String!
}

type Query {
  activeDraftSession: DraftSession
  archetype(id: Int!): Archetype
  archetypes: [Archetype!]!
  draftPick(id: Int!): DraftPick
  draftPicks: [DraftPick!]!
  draftPicksBySession(sessionId: Int!): [DraftPick!]!
  draftRecommendation(id: Int!): DraftRecommendation
  draftRecommendations: [DraftRecommendation!]!
  draftSession(id: Int!): DraftSession
  draftSessions: [DraftSession!]!
  latestPlayerRating(playerId: Int!): PlayerRating
  player(id: Int): Player
  playerAbilities: [PlayerAbility!]!
  playerAbilitiesByPlayer(playerId: Int!): [PlayerAbility!]!
  playerAbility(id: Int!): PlayerAbility
  playerAnalyses: [PlayerAnalysis!]!
  playerAnalysis(id: Int!): PlayerAnalysis
  playerAnalysisByPlayer(playerId: Int!): PlayerAnalysis
  playerRating(id: Int!): PlayerRating
  playerRatings: [PlayerRating!]!
  playerRatingsByPlayer(playerId: Int!): [PlayerRating!]!
  playerStat(id: Int!): PlayerStats
  playerStats: [PlayerStats!]!
  playerStatsByPlayer(playerId: Int!): PlayerStats
  players: [Player!]!
  position(id: Int!): Position
  positions: [Position!]!
  positionsByType(type: String!): [Position!]!
  recommendationsForPick(pickNumber: Int!, roundNumber: Int!, sessionId: Int!): [DraftRecommendation!]!
  rosterRequirement(id: Int!): RosterRequirement
  rosterRequirements: [RosterRequirement!]!
  rosterRequirementsByGroup(group: String!): [RosterRequirement!]!
  teams: [Team!]!
  validateRoster(positions: [String!]!): Boolean!
}

type RosterRequirement {
  id: Int!
  isRequired: Boolean!
  maximumPlayers: Int!
  minimumPlayers: Int!
  position: String!
  positionGroup: String!
}

type Team {
  id: Int!
  label: String
  name: String
}

input UpdateArchetypeInput {
  label: String
}

input UpdateDraftPickInput {
  draftedPosition: String
  pickNumber: Int
  playerId: Int
  roundNumber: Int
}

input UpdateDraftRecommendationInput {
  reason: String
  recommendationScore: Float
}

input UpdateDraftSessionInput {
  rosterNeeds: String
  status: String
}

input UpdatePlayerAbilityInput {
  abilityLabel: String
  abilityOrder: Int
  ratingId: Int
}

input UpdatePlayerAnalysisInput {
  ageAdjustedScore: Float
  bestPositionScore: Float
  normalizedScore: Float
  originalPositionScore: Float
  playerType: String
  positionChangeRecommended: Boolean
  projectedPick: Int
  rank: Int
  ratingId: Int
  suggestedPosition: String
}

input UpdatePlayerInput {
  age: Int
  archetypeId: Int
  college: String
  firstName: String
  handedness: String
  height: String
  jerseyNumber: Int
  lastName: String
  positionId: Int
  teamId: Int
  weight: Int
  yearsPro: Int
}

input UpdatePlayerRatingInput {
  archetypeId: Int
  iterationLabel: String
  overallRating: Float
  positionId: Int
  teamId: Int
}

input UpdatePlayerStatsInput {
  acceleration: Float
  agility: Float
  awareness: Float
  bcvision: Float
  blockShedding: Float
  breakSack: Float
  breakTackle: Float
  carrying: Float
  catchInTraffic: Float
  catching: Float
  changeOfDirection: Float
  deepRouteRunning: Float
  finesseMoves: Float
  hitPower: Float
  impactBlocking: Float
  injury: Float
  jukeMove: Float
  jumping: Float
  kickAccuracy: Float
  kickPower: Float
  kickReturn: Float
  leadBlock: Float
  manCoverage: Float
  mediumRouteRunning: Float
  passBlock: Float
  passBlockFinesse: Float
  passBlockPower: Float
  playAction: Float
  playRecognition: Float
  powerMoves: Float
  press: Float
  pursuit: Float
  ratingId: Int
  release: Float
  runBlock: Float
  runBlockFinesse: Float
  runBlockPower: Float
  runningStyle: String
  shortRouteRunning: Float
  spectacularCatch: Float
  speed: Float
  spinMove: Float
  stamina: Float
  stiffArm: Float
  strength: Float
  tackle: Float
  throwAccuracyDeep: Float
  throwAccuracyMid: Float
  throwAccuracyShort: Float
  throwOnTheRun: Float
  throwPower: Float
  throwUnderPressure: Float
  toughness: Float
  trucking: Float
  zoneCoverage: Float
}

input UpdatePositionInput {
  code: String
  name: String
  type: String
}

input UpdateRosterRequirementInput {
  isRequired: Boolean
  maximumPlayers: Int
  minimumPlayers: Int
  position: String
  positionGroup: String
}